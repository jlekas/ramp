.\" Manpage for ramp
.\" Contact jlekas@andrew.cmu.edu or shamal@andrew.cmu.edu for issues or corrections
.TH Ramp 1 "20 May 2017" "version 1.0"
.SH NAME
Ramp
.SH DESCRIPTION
Ramp is a peer to peer application that allows users to chat, send files, and video chat with other active users through direct TCP connection.
.SH PLATFORMS
Currently Ramp has been tested on and used on OSX and Ubuntu environments.
.SH LICENSE
We chose to use the MIT License which allows for the application to be used or distributed in any way, but limits the liability of the developers if an error in Ramp were to arise. The exact wording of the license is as follows:

The MIT License

Copyright (c) 2017

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

.SH INSTALLATION
Currently Ramp is only supported on Mac and Linux environments. Ramp requires that python2.7.13 be installed on the machine running and requires several other python modules to be installed on the computer. In the scipts folder, there is a file setup.sh that will install the necessary modules and versions so that Ramp will correctly operate. In order to run ramp, there is an executable, ramp.exe that will properly load the application. After running setup.sh in a terminal run 'python2.7 init_db.py' in order to configure the database that is used.
.SH OPTIONS
Ramp does not take any options
.SH HOW TO USE
In order to connect with another peer, type in the IP Address of the other user in the Connect to IP box on the top right of the application screen and then click connect. The Peer box will show you the users that you have connected with on this current session because the IP address of the user you connect with will change depending on their location and the device they are using. In order to make finding your IP Address easy, your IP Address will be displayed on the top left of the Application after the text 'MyIP: '. Once you are connected with another user, their IP address will pop up in the peer box and if there are issues connecting to this IP address, a message "Could not connect to: IP" will be displayed in the chat box. At this point you can chat, video chat, and share your files with other users on Ramp. To chat with a connected peer, type your message in the box to the left of the 'Send Chat' button and either hit enter or click on 'Send Chat'. The messages between you and the other user will be stored for the remainder of your current session. If you connect between different peers in the same session, your messages displayed in the chat bar will be specific to the user you are currently connected to. In order to share files, you would type in either a specific file you are searching for, or a key phrase in the 'Search for Friends' Files' box, select either 'Specific File' or 'General Search' and click 'Download Files'. This will download all of the files that meet the search requirements into your 'Downloads' folder in the directory you have downloaded Ramp in. When you would like other users to be able to download your files, place the files you would like to share with only your direct connections in your 'Private' folder and files that would be accessable to any user on Ramp in your 'Public' folder. This will allow other users to be able to download the files you have provided. In order to video chat with a connected peer, simply make sure that you are connected and click the Start Video Chat button. If both users have a connected camera, the video feed of the other user will be displayed in a new window that will pop up on your screen.
.SH DEVELOPMENT
The problem that we worked on was creating a peer to peer application that would allow for users to securely send data and easily communicate with each other. Each peer is both a server and a client where the user has the ability to send and receive data without the aid of a centralized server that would generally facilitate traffic between users. Sockets were used in order to accommodate the TCP network protocol to transfer data between peers. We used the TCP protocol because this allowed us to send and receieve data in packets allowing for the transfer of large amounts of data without losing or having our data changed. Sockets were used to set up connections between two peers based on the IP address given as an input and using port 1085 which is a port that is associated with the TCP. By implementing the TCP all data that is sent from the client of one peer must be received by the server of the peer that it is connected to which stops data from being lost or damaged while it is transmitted. Getting the IP address on linux machines was an error that was run into early on and solved by using a function that creates a socket connected to the IP of 4.2.2.1 which is a public server and then getting the address of the local computer connected to the server and closing the connection. This stopped the issue of receiving 127.0.0.1 as the IP address of linux systems. In order to form a connection between peers, sockets were threaded so the server of each peer is always listening for connections on port 1085. When a client tries to connect to this server, the server creates a new thread to handle the connection which allows multiple clients to communicate with the server. Python had socket and threading modules that allowed for the use of these techniques when solving the issue of peer to peer data transmission. 

When sending chat messages between peers, the gui displays messages that have been received by the peer's server and messages that have been sent out by the peer's client. This information is stored by IP Address so that the chat messages that are shown are user specific. The server receives messages by passing around a socket variable that has the IP and port of the connection and then using the .recv functiin a loop with a buffer size in order to receive smaller amounts of data and handle this information in a safe way. When a peer sends a message the peer's client will send a tag, which is a piece of information that will relay to the intended server what type of data is being sent. The message type of data has a corresponding tag of 'X' that is sent. The data after that is sent is the message which the user has typed in and wants transmitted. The server will read the tag, call the correct function in the file to handle the message data and then handle the remaining data after the tag. This message is stored in a frame that is used by the front end of the application to display the message.

Sending files between peers is similar to sending messages, but there are key differences. A database is used on each individual peer that keeps track of file requests sent to it. The message table stores information on the message by saving the search of what the other peer was looking for and a messageID which is unique to each request. A query or fileQuery object is used in Ramp that saves the message, messageId, and a privPub value which stores whether the search should include Public or Private directories when looking for files matching the search. When extending and continuing this project, the database will be used more extensively when peers search for files in all of the Ramp network. If one user, peer A, looks for all files on water in the entirety of the network, all peers connected to peer A will search their local files and also request files from their connections. In order to make sure that one peer doesn't send out files to multiple other peers, each peer would check to see if the message ID of the incoming message has already been stored, and if it has it would let the peer requesting this message know it has already been asked for its files and not send anything else out. This would stop any redundancy or infinite loops inside the network. Currently files are sent between peers in a more simple fashion. If peer A is looking for files about water on peer B's computer, peer A would type this into the search bar and receive any files that match this search in the 'Downloads' folder in Ramp. Peer A would create a socket and connect with Peer B sending an 'f' tag and the search information to peer B. Peer B's server would get the 'f' tag and using a file searching function, locate all files that match this search in the correct directory. The fileRequest function in the server will then create a new thread for each file that it will send to Peer A and Peer B's client will send read the data out of the files and send this data to Peer A. The current supported file types are jpg, mp4, mp3, and pdf where each file type has a different tag that will be sent. Peer A's server will then create a new file in the downloads directory with the correct extension determined by the tag, receive the data, and write this data into the new file.

Video chat is the final current feature that is available on Ramp. When Peer A and Peer B want to video chat with each other they will click the 'Start Video Chat' button. This will start a new thread where Peer A will load the pygame module which will start recording from a webcam that must be attached to Peer A's computer. A socket will then be created every .05 seconds where the picture image will be sent to Peer B with a tag 'v' indicating that Peer B's server will treat the incoming data as a part of video chat. Peer B's server will find the tag and create a pygame window that will display the incoming data. The data is received in a nested while loop where the data is appended to a list that is continually used to update the screen and will stop if either peer stops sending data.

When continuing Ramp, several features will be added. Pygame is a module used to capture images from users' cameras, although this feature is currently only supported on Linux environments. In order to fix this issue, a different module should be used in the future that will allow for any type of operating system to run the video chat feature. A further integration of the database could be used to store the messages of users so that chat messages would remain even after a session of the application is terminated. It is also difficult to find the IP Address of a friend and a further extension would be to come up with an algorithm that would allow for users to easily find the IP Address of their friends in a way that is through Ramp instead of having to tell each other their IP Address.

.SH HISTORY
This project was started at the beginning of the class 21-765 without prior research. It started out as a peer to peer application that would connect two people and allow them to chat together. We chose to use python2.7 because there were a lot of modules for different parts of Ramp such as the pygame module which allows for the video chat feature. The socket and thread modules allowed for easy integration of peer to peer communication. After chatting between two peers, we worked to also add a file sharing feature as well as video chat capabilities.

.SH BUGS/SECURITY
The video chat section of Ramp currently only works on linux systems due to limitations in the pygame module that was used to deal with video processing. When using Ramp be aware that downloading files from other computers can be dangerous. Ramp currently allows for any files of the type: mp4, mp3, jpg, and pdf to be downloaded directly to your computer. If someone were to put a virus or write malicious code and put it in their directory another person could download this to their computer. Direct connection between peers allows for data to be transmitted faster, but can lead to a more relaxed security status.
.SH AUTHORS
James Lekas (jlekas@andrew.cmu.edu) Scott Hamal (shamal@andrew.cmu.edu)
